#standardSQL
# 20.01 - Adoption of HTTP/2 by site and requests
SELECT 
  client,
  firstHtml, 
  JSON_EXTRACT_SCALAR(payload, "$._protocol") AS http_version, 
  COUNT(*) AS num_requests,
  ROUND(COUNT(0) * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct
FROM 
  `httparchive.almanac.requests` 
GROUP BY
  client,
  firstHtml,
  http_version
ORDER BY 
  client,
  firstHtml,
  http_version

===============================================================================  

#standardSQL
# 20.2 - Measure of all HTTP versions (0.9, 1.0, 1.1, 2, QUIC) for main page of all sites, and for HTTPS sites. Table for last crawl.
SELECT 
  client,
  JSON_EXTRACT_SCALAR(payload, "$._protocol") AS protocol,
  COUNT(0) AS num_pages,
  SUM(COUNT(0)) OVER (PARTITION BY client) AS total, 
  COUNTIF(url LIKE "https://%") AS num_https_pages,
  ROUND(COUNT(0) * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct_pages,
  ROUND(COUNTIF(url LIKE "https://%") * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct_https
FROM 
   `httparchive.almanac.requests`
WHERE
   firstHtml
GROUP BY
  client,
  protocol
ORDER BY 
  num_pages / total DESC
  
=============================================================================== 

#standardSQL
# 20.03 - Average percentage of resources loaded over HTTP/2 or HTTP/1.1 per site
SELECT
  client,
  ROUND(AVG(http_1_1/num_requests) * 100,2) avg_pct_http_1_1,
  ROUND(AVG(http_2/num_requests) * 100,2) avg_pct_http_2
FROM (
  SELECT 
    client,
    page,
    COUNT(*) AS num_requests, 
    SUM(IF(JSON_EXTRACT_SCALAR(payload, "$._protocol") ="http/0.9",1,0)) AS http_0_9, 
    SUM(IF(JSON_EXTRACT_SCALAR(payload, "$._protocol") ="http/1.0",1,0)) AS http_1_0, 
    SUM(IF(JSON_EXTRACT_SCALAR(payload, "$._protocol") ="http/1.1",1,0)) AS http_1_1,
    SUM(IF(JSON_EXTRACT_SCALAR(payload, "$._protocol") ="HTTP/2",1,0)) AS http_2
  FROM 
    `httparchive.almanac.requests` 
  GROUP BY
    client,
    page
)
GROUP BY 
  client

=============================================================================== 
  
#standardSQL
# 20.04 - Number of HTTP (not HTTPS) sites which return upgrade HTTP header containing h2.
CREATE TEMPORARY FUNCTION getUpgradeHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'upgrade'
    });
    return st['value'];
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  firstHtml,  
  COUNT(*) AS num_requests
FROM 
  `httparchive.almanac.requests`
WHERE
  url LIKE "http://%"
  AND getUpgradeHeader(payload) LIKE "%h2%"
GROUP BY
  client,
  firstHtml

===============================================================================   

#standardSQL
# 20.04a_5a_6a - Detailed upgrade headers for 20.04, 20.05 and 20.06
CREATE TEMPORARY FUNCTION getUpgradeHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'upgrade'
    });
    return st['value'];
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  firstHtml,  
  JSON_EXTRACT_SCALAR(payload, "$._protocol") AS protocol,
  IF(url LIKE "https://%","https","http") AS http_or_https,
  getUpgradeHeader(payload) AS upgrade,
  COUNT(*) AS num_requests
FROM 
  `httparchive.almanac.requests` 
GROUP BY
  client,
  firstHtml,
  protocol,
  http_or_https,
  upgrade
  
=============================================================================== 

#standardSQL
# 20.05 - Number of HTTPS sites using HTTP/2 which return upgrade HTTP header containing h2
CREATE TEMPORARY FUNCTION getUpgradeHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'upgrade'
    });
    return st['value'];
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  firstHtml,  
  COUNT(*) AS num_requests
FROM 
  `httparchive.almanac.requests`
WHERE
  url LIKE "https://%"
  AND JSON_EXTRACT_SCALAR(payload, "$._protocol") = "HTTP/2"
  AND getUpgradeHeader(payload) LIKE "%h2%"
GROUP BY
  client,
  firstHtml

===============================================================================   
  
#standardSQL
# 20.06 - Number of HTTPS sites not using HTTP/2 which return upgrade HTTP header containing h2
CREATE TEMPORARY FUNCTION getUpgradeHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'upgrade'
    });
    return st['value'];
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  firstHtml,  
  COUNT(*) AS num_requests
FROM 
  `httparchive.almanac.requests`
WHERE
  url LIKE "https://%"
  AND JSON_EXTRACT_SCALAR(payload, "$._protocol") != "HTTP/2"
  AND getUpgradeHeader(payload) LIKE "%h2%"
GROUP BY
  client,
  firstHtml
  
=============================================================================== 

#standardSQL
# 20.07 - % of sites affected by CDN prioritization issues (H2 and served by CDN)
SELECT 
  client,
  IF(pages.cdn = "", "Not using CDN", pages.cdn) AS CDN,
  IF(prioritization_status IS NOT null, prioritization_status, "Unknown") prioritizes_correctly,
  COUNT(*) AS num_pages,
  ROUND(COUNT(0) * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct
FROM 
  (
    SELECT 
      client,
      url,
      JSON_EXTRACT_SCALAR(payload, "$._cdn_provider") as cdn
    FROM 
      `httparchive.almanac.requests` 
    WHERE 
      JSON_EXTRACT_SCALAR(payload, "$._protocol") ="HTTP/2"
      AND firstHtml
  ) AS pages
LEFT JOIN 
  `httparchive.almanac.h2_prioritization_cdns_201909` AS h2_pri
ON pages.cdn = h2_pri.cdn
GROUP BY
  client,
  CDN,
  prioritizes_correctly
ORDER BY num_pages DESC

=============================================================================== 

#standardSQL
# 20.08 - Count of HTTP/2 Sites Grouped By Server
CREATE TEMPORARY FUNCTION getServerHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    // Find server header
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'server'
    });
    // Remove everything after / in the server header value and return
    return st['value'].split("/")[0]; 
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  getServerHeader(payload) AS server_header,
  COUNT(*) AS num_pages,
  ROUND(COUNT(0) * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct
FROM 
  `httparchive.almanac.requests` 
WHERE
  firstHtml
  AND JSON_EXTRACT_SCALAR(payload, "$._protocol") = "HTTP/2"
GROUP BY
  client,
  server_header
ORDER BY num_pages DESC

=============================================================================== 

#standardSQL
# 20.09 - Count of non-HTTP/2 Sites Grouped By Server
CREATE TEMPORARY FUNCTION getServerHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    // Find server header
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'server'
    });
    // Remove everything after / in the server header value and return
    return st['value'].split("/")[0]; 
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  getServerHeader(payload) AS server_header,
  COUNT(*) AS num_pages,
  ROUND(COUNT(0) * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct
FROM 
  `httparchive.almanac.requests` 
WHERE
  firstHtml
  AND JSON_EXTRACT_SCALAR(payload, "$._protocol") != "HTTP/2"
GROUP BY
  client,
  server_header
ORDER BY num_pages DESC

=============================================================================== 

#standardSQL
# 20.10 - Count of HTTP/2 Sites using HTTP/2 Push
SELECT 
  client,
  COUNT(DISTINCT page) AS num_pages
FROM (

  SELECT 
    client,
    page
  FROM 
    `httparchive.almanac.requests` 
  WHERE 
    JSON_EXTRACT_SCALAR(payload, "$._protocol") = "HTTP/2"
    AND 
    JSON_EXTRACT_SCALAR(payload, "$._was_pushed") = "1"
)
GROUP BY
  client
  
=============================================================================== 
  
#standardSQL
# 20.11 - Average number of HTTP/2 Pushed Resources and Average Bytes
SELECT 
  client,
  COUNT(DISTINCT page) AS num_pages,
  ROUND(AVG(num_requests),2) AS avg_pushed_requests,
  ROUND(AVG(kb_transfered),2) AS avg_kb_transfered
FROM (

SELECT 
    client,
    page,
    SUM(CAST(JSON_EXTRACT_SCALAR(payload, "$._bytesIn") AS INT64)/1024) AS kb_transfered,
    COUNT(*) AS num_requests
  FROM 
    `httparchive.almanac.requests` 
  WHERE 
    JSON_EXTRACT_SCALAR(payload, "$._protocol") = "HTTP/2"
    AND 
    JSON_EXTRACT_SCALAR(payload, "$._was_pushed") = "1"
  GROUP BY 
    client,
    page
)
GROUP BY
  client
  
=============================================================================== 
  
#standardSQL
# 20.12 - Average number of HTTP/2 Pushed Resources and Average Bytes by Content type
SELECT 
  client,
  content_type,
  COUNT(DISTINCT page) AS num_pages,
  ROUND(AVG(num_requests),2) AS avg_pushed_requests,
  ROUND(AVG(kb_transfered),2) AS avg_kb_transfered
FROM (

SELECT 
    client,
    page,
    JSON_EXTRACT_SCALAR(payload, "$._contentType") as content_type,
    SUM(CAST(JSON_EXTRACT_SCALAR(payload, "$._bytesIn") AS INT64)/1024) AS kb_transfered,
    COUNT(*) AS num_requests
  FROM 
    `httparchive.almanac.requests`  
  WHERE 
    JSON_EXTRACT_SCALAR(payload, "$._protocol") = "HTTP/2"
    AND 
    JSON_EXTRACT_SCALAR(payload, "$._was_pushed") = "1"
  GROUP BY 
    client,
    page,
    content_type
)
GROUP BY
  client,
  content_type
  
=============================================================================== 
 
#standardSQL
# 20.13 Count of preload HTTP Headers with nopush attribute set. Once off stat for last crawl
CREATE TEMPORARY FUNCTION getLinkHeaders(payload STRING)
RETURNS ARRAY<STRING>
LANGUAGE js AS """
  var $ = JSON.parse(payload);
  var headers = $.response.headers;
  var preload=[];
  
  for (i in headers) {
      if (headers[i].name.toLowerCase() === 'link')
        preload.push(headers[i].value);
      }
     return preload;  
    
""";

SELECT 
  client, 
  firstHtml, 
  COUNT(*) as num_requests,
  ROUND(COUNT(0) * 100 / SUM(COUNT(0)) OVER (PARTITION BY client), 2) AS pct
FROM (
  SELECT 
    client,
    firstHtml,  
    getLinkHeaders(payload) AS link_headers
  FROM 
   `httparchive.almanac.requests` 
)
CROSS JOIN
  UNNEST(link_headers) AS link_header
WHERE 
  link_header LIKE '%preload%' 
  AND link_header LIKE '%nopush%'
GROUP BY client, firstHtml

=============================================================================== 

#standardSQL
# 20.15 - Measure number of TCP Connections per site.
SELECT 
  "mobile" AS client,
  JSON_EXTRACT_SCALAR(payload, "$._protocol") AS protocol,
  COUNT(*) AS num_pages,
  APPROX_QUANTILES(_connections, 100)[SAFE_ORDINAL(50)] AS median,
  APPROX_QUANTILES(_connections, 100)[SAFE_ORDINAL(75)] AS p75,
  APPROX_QUANTILES(_connections, 100)[SAFE_ORDINAL(95)] AS p95
FROM 
  `httparchive.requests.2019_07_01_mobile` AS requests
INNER JOIN
  `httparchive.summary_pages.2019_07_01_mobile` AS summary
ON
  requests.url = summary.url
WHERE
  JSON_EXTRACT_SCALAR(payload, "$._is_base_page") = "true"
GROUP BY 
  client, 
  protocol

UNION ALL

SELECT 
  "desktop" AS client,
  JSON_EXTRACT_SCALAR(payload, "$._protocol") AS protocol,
  COUNT(*) AS num_pages,
  APPROX_QUANTILES(_connections, 100)[SAFE_ORDINAL(50)] AS median,
  APPROX_QUANTILES(_connections, 100)[SAFE_ORDINAL(75)] AS p75,
  APPROX_QUANTILES(_connections, 100)[SAFE_ORDINAL(95)] AS p95
FROM 
  `httparchive.requests.2019_07_01_desktop` AS requests
INNER JOIN
  `httparchive.summary_pages.2019_07_01_desktop` AS summary
ON
  requests.url = summary.url
WHERE
  JSON_EXTRACT_SCALAR(payload, "$._is_base_page") = "true"
GROUP BY 
  client, 
  protocol
  
=============================================================================== 
  
#standardSQL
# 20.16 - Detailed alt-svc headers
CREATE TEMPORARY FUNCTION getUpgradeHeader(payload STRING)
RETURNS STRING
LANGUAGE js AS """
  try {
    var $ = JSON.parse(payload);
    var headers = $.response.headers;
    var st = headers.find(function(e) { 
      return e['name'].toLowerCase() === 'alt-svc'
    });
    return st['value'];
  } catch (e) {
    return '';
  }
""";

SELECT 
  client,
  firstHtml, 
  JSON_EXTRACT_SCALAR(payload, "$._protocol") AS protocol,
  IF(url LIKE "https://%","https","http") AS http_or_https,
  getUpgradeHeader(payload) AS upgrade,
  COUNT(*) AS num_requests
FROM 
  `httparchive.almanac.requests` 
GROUP BY
  client,
  firstHtml,
  protocol,
  http_or_https,
  upgrade              