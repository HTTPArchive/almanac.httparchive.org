[sqlfluff]
## verbose is an integer (0-2) indicating the level of log output
verbose = 0
## Turn off color formatting of output
nocolor = False
## Supported dialects https://docs.sqlfluff.com/en/stable/dialects.html
## Or run 'sqlfluff dialects'
dialect = bigquery
## One of [raw|jinja|python|placeholder]
templater = jinja
## Comma separated list of rules to check, or None for all
rules = None
## Comma separated list of rules to exclude, or None
exclude_rules = L011,L014,L016,L020,L026,L027,L028,L029,L030,L031,L032,L034,L035,L036,L037,L042,L043,L051,L060
# L011 - We don't always alias tables with AS ("FROM table1 AS tb1" instead of "FROM table1 tb1"). Do for columns but not for tables.
# L014 - Unquoted identifiers (e.g. column names) will be mixed case so don't enforce case
# L016 - We allow longer lines as some of our queries are complex. Maybe should limit in future?
# L020 - Asks for unique table aliases meaning it complains if selecting from two 2021_07_01 tables as implicit alias is table name (not fully qualified) so same.
# L026 - BigQuery uses STRUCTS which can look like incorrect table references
# L027 - Asks for qualified columns for ambiguous ones, but we not qualify our columns, and they are not really ambiguous (or BigQuery would complain)
# L028 - Insists on references in column names even if not ambiguous. Bit OTT.
# L029 - Avoids keywords as identifiers but we use this a lot (e.g. AS count, AS max...etc.)
# L030 - Function names will be mixed case so don't enforce case
# L031 - Avoid aliases in from and join - why?
# L032 - Uses joins instead of USING - why?
# L034 - Insists on wildcards (*) in certain SELECT order - why?
# L035 - Do not use ELSE NULL as redundant. But it's clearer!?
# L036 - Select targets should be on new lines but sub clauses don't always obey this. Maybe revisit in future?
# L037 - if using DESC in one ORDER BY column, then insist on ASC/DESC for all.
# L042 - Use CTEs instead of subqueries. We don't use this consistently and big rewrite to do that.
# L043 - Use coalesce instead of case if you can. But it's clearer!?
# L051 - INNER JOIN must be fully qualified. Probably should use this but not our style.
# L060 - Use COALESCE instead of IFNULL or NVL. We think ISNULL is clearer.
# The depth to recursively parse to (0 for unlimited)
recurse = 0
# Below controls SQLFluff output, see max_line_length for SQL output
output_line_length = 80
# Number of passes to run before admitting defeat
runaway_limit = 10
# Ignore linting errors in templated sections
ignore_templated_areas = True
# can either be autodetect or a valid encoding e.g. utf-8, utf-8-sig
encoding = autodetect
# Ignore inline overrides (e.g. to test if still required)
disable_noqa = False
# Comma separated list of file extensions to lint
# NB: This config will only apply in the root folder
sql_file_exts = .sql,.sql.j2,.dml,.ddl


[sqlfluff:indentation]
## See https://docs.sqlfluff.com/en/stable/indentation.html
indented_joins = False
indented_using_on = False
template_blocks_indent = True

[sqlfluff:templater]
unwrap_wrapped_queries = True

[sqlfluff:templater:jinja]
apply_dbt_builtins = True

[sqlfluff:templater:jinja:macros]
# Macros provided as builtins for dbt projects
dbt_ref = {% macro ref(model_ref) %}{{model_ref}}{% endmacro %}
dbt_source = {% macro source(source_name, table) %}{{source_name}}_{{table}}{% endmacro %}
dbt_config = {% macro config() %}{% for k in kwargs %}{% endfor %}{% endmacro %}
dbt_var = {% macro var(variable) %}item{% endmacro %}
dbt_is_incremental = {% macro is_incremental() %}True{% endmacro %}

# Some rules can be configured directly from the config common to other rules.
[sqlfluff:rules]
tab_space_size = 2
max_line_length = 80
indent_unit = space
comma_style = trailing
allow_scalar = True
single_table_references = consistent
unquoted_identifiers_policy = all

# Some rules have their own specific config.
[sqlfluff:rules:L003]
lint_templated_tokens = True

[sqlfluff:rules:L007]
operator_new_lines = before

[sqlfluff:rules:L010]
# Keywords
capitalisation_policy = upper

[sqlfluff:rules:L012]
# Aliasing preference for columns
aliasing = explicit

[sqlfluff:rules:L038]
select_clause_trailing_comma = forbid

[sqlfluff:rules:L040]
# Null & Boolean Literals
capitalisation_policy = consistent

[sqlfluff:rules:L047]
# Consistent syntax to count all rows
prefer_count_1 = False
prefer_count_0 = True

[sqlfluff:rules:L052]
# Semi-colon formatting approach
multiline_newline = False
require_final_semicolon = False

[sqlfluff:rules:L054]
# GROUP BY/ORDER BY column references
group_by_and_order_by_style = consistent

[sqlfluff:rules:L057]
## Special characters in identifiers
unquoted_identifiers_policy = all
quoted_identifiers_policy = all
allow_space_in_identifier = False
additional_allowed_characters = "-."

[sqlfluff:rules:L062]
# Comma separated list of blocked words that should not be used
blocked_words = None

[sqlfluff:rules:L063]
# Data Types
extended_capitalisation_policy = upper
# Comma separated list of words to ignore for this rule
ignore_words = None

[sqlfluff:rules:L064]
# Consistent usage of preferred quotes for quoted literals
preferred_quoted_literal_style = single_quotes
# Disabled for dialects that do not support single and double quotes for quoted literals (e.g. Postgres)
force_enable = False
