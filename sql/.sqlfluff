[sqlfluff]
dialect = bigquery
# Comma separated list of rules to exclude, or None
exclude_rules = AL01,AL04,AL07,AM03,AM05,CP02,CP03,CV02,LT05,LT08,LT09,RF01,RF02,RF03,RF04,ST01,ST02,ST05,ST06,ST07,ST08
# AL01 - We don't always alias tables with AS ("FROM table1 AS tb1" instead of "FROM table1 tb1"). Do for columns but not for tables.
# AL04 - Asks for unique table aliases meaning it complains if selecting from two 2021_07_01 tables as implicit alias is table name (not fully qualified) so same.
# AL07 - Avoid aliases in from and join - why?
# AM03 - if using DESC in one ORDER BY column, then insist on ASC/DESC for all.
# AM05 - INNER JOIN must be fully qualified. Probably should use this but not our style.
# CP02 - Unquoted identifiers (e.g. column names) will be mixed case so don't enforce case
# CP03 - Function names will be mixed case so don't enforce case
# CV02 - Use COALESCE instead of IFNULL or NVL. We think ISNULL is clearer.
# LT05 - We allow longer lines as some of our queries are complex. Maybe should limit in future?
# LT08 - CTEs may be chained and do not require a blank line separator, only the last one.
# LT09 - Select targets should be on new lines but sub clauses don't always obey this. Maybe revisit in future?
# RF01 - BigQuery uses STRUCTS which can look like incorrect table references
# RF02 - Asks for qualified columns for ambiguous ones, but we not qualify our columns, and they are not really ambiguous (or BigQuery would complain)
# RF03 - Insists on references in column names even if not ambiguous. Bit OTT.
# RF04 - Avoids keywords as identifiers but we use this a lot (e.g. AS count, AS max...etc.)
# ST01 - Do not use ELSE NULL as redundant. But it's clearer!?
# ST02 - Use coalesce instead of case if you can. But it's clearer!?
# ST05 - Use CTEs instead of subqueries. We don't use this consistently and big rewrite to do that.
# ST06 - Insists on wildcards (*) in certain SELECT order - why?
# ST07 - Uses joins instead of USING - why?
# ST08 - Sometimes clearer to include brackets for complex COUNT(DISTINCT) cases


large_file_skip_byte_limit = 40000
# CPU processes to use while linting.
# If positive, just implies number of processes.
# If negative or zero, implies number_of_cpus - specifed_number.
# e.g. -1 means use all processors but one. 0  means all cpus.
processes = -1

[sqlfluff:indentation]
# See https://docs.sqlfluff.com/en/stable/layout.html#configuring-indent-locations
indented_using_on = False
tab_space_size = 2

[sqlfluff:layout:type:binary_operator]
line_position = trailing

[sqlfluff:rules:capitalisation.keywords]
capitalisation_policy = upper

[sqlfluff:rules:capitalisation.types]
extended_capitalisation_policy = upper

[sqlfluff:rules:convention.blocked_words]
# Regex of blocked SQL that should not be used.
# Can be overridden with `-- noqa: CV09` for those chapters using secondary pages
# TABLESAMPLE - sometimes used for testing. Shouldn't be used in production as not random.
# sample_data - sometimes used for testing. Shouldn't be used in production.
# Block 2022_05_12 (contains secondary pages)
# Block 2022_06_09 (contains secondary pages)
# Block 2022_07_01 (probably forgot to update month to June for 2022)
# Block 2021_06_01 (probably forgot to update month to July for 2021)
blocked_regex = (TABLESAMPLE|sample_data|2022_?05_?12|2022_?06_?09|2022_?07_?01|2021_?06_?01)

[sqlfluff:rules:convention.count_rows]
prefer_count_0 = True

[sqlfluff:rules:convention.quoted_literals]
preferred_quoted_literal_style = single_quotes

[sqlfluff:rules:references.special_chars]
additional_allowed_characters = "-."
