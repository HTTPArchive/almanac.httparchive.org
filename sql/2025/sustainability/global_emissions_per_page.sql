#standardSQL

-- Energy consumption factors from SWDM v4 (in kWh/GB)
-- Operational + Embodied
DECLARE ENERGY_PER_GB_DATACENTER NUMERIC DEFAULT CAST(0.055 + 0.012 AS NUMERIC);
-- Operational + Embodied
DECLARE ENERGY_PER_GB_NETWORK NUMERIC DEFAULT CAST(0.059 + 0.013 AS NUMERIC);
-- Operational + Embodied
DECLARE ENERGY_PER_GB_DEVICE NUMERIC DEFAULT CAST(0.080 + 0.081 AS NUMERIC);

-- Total energy consumption per GB, calculated by summing the above factors
-- Sum of all operational and embodied energies
DECLARE KW_PER_GB NUMERIC DEFAULT CAST(
  ENERGY_PER_GB_DATACENTER +
  ENERGY_PER_GB_NETWORK +
  ENERGY_PER_GB_DEVICE AS NUMERIC
);

-- Global average carbon intensity of electricity generation (gCO2/kWh)
DECLARE GLOBAL_GRID_INTENSITY NUMERIC DEFAULT 494;

-- Function to calculate emissions in gCO2
CREATE TEMP FUNCTION CALCULATE_EMISSIONS(
  bytes FLOAT64,
  kw_per_GB FLOAT64,
  grid_intensity FLOAT64
) RETURNS FLOAT64 AS (
  (BYTES / 1024 / 1024 / 1024) *  -- Convert bytes to GB
  (KW_PER_GB) *
  GRID_INTENSITY
);

WITH PAGE_DATA AS (
  SELECT
    CLIENT,
    CAST(JSON_VALUE(SUMMARY, '$.bytesTotal') AS INT64) AS BYTESTOTAL,
    CAST(JSON_VALUE(SUMMARY, '$.bytesHtml') AS INT64) AS BYTESHTML,
    CAST(JSON_VALUE(SUMMARY, '$.bytesJS') AS INT64) AS BYTESJS,
    CAST(
      COALESCE(
        JSON_VALUE(SUMMARY, '$.bytesCss'),
        JSON_VALUE(SUMMARY, '$.bytesStyle')
      ) AS INT64
    ) AS BYTESCSS,
    CAST(JSON_VALUE(SUMMARY, '$.bytesImg') AS INT64) AS BYTESIMG,
    CAST(JSON_VALUE(SUMMARY, '$.bytesOther') AS INT64) AS BYTESOTHER,
    CAST(JSON_VALUE(SUMMARY, '$.bytesHtmlDoc') AS INT64) AS BYTESHTMLDOC,
    CAST(JSON_VALUE(SUMMARY, '$.bytesFont') AS INT64) AS BYTESFONT
  FROM
    `httparchive.crawl.pages`
  WHERE
    DATE = '2025-06-01' AND IS_ROOT_PAGE
)

SELECT
  PERCENTILE,
  CLIENT,
  -- Total resources
  APPROX_QUANTILES(
    BYTESTOTAL / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS TOTAL_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESTOTAL, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS TOTAL_EMISSIONS,
  -- HTML resources
  APPROX_QUANTILES(
    BYTESHTML / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS HTML_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESHTML, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS HTML_EMISSIONS,
  -- JavaScript resources
  APPROX_QUANTILES(
    BYTESJS / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS JS_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESJS, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS JS_EMISSIONS,
  -- CSS resources
  APPROX_QUANTILES(
    BYTESCSS / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS CSS_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESCSS, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS CSS_EMISSIONS,
  -- Image resources
  APPROX_QUANTILES(
    BYTESIMG / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS IMG_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESIMG, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS IMG_EMISSIONS,
  -- Other resources
  APPROX_QUANTILES(
    BYTESOTHER / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS OTHER_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESOTHER, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS OTHER_EMISSIONS,
  -- HTML document
  APPROX_QUANTILES(
    BYTESHTMLDOC / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS HTML_DOC_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESHTMLDOC, KW_PER_GB, GLOBAL_GRID_INTENSITY),
    1000
  ) [OFFSET(PERCENTILE * 10)] AS HTML_DOC_EMISSIONS,
  -- Font resources
  APPROX_QUANTILES(
    BYTESFONT / 1024, 1000
  ) [OFFSET(PERCENTILE * 10)] AS FONT_KBYTES,
  APPROX_QUANTILES(
    CALCULATE_EMISSIONS(BYTESFONT, KW_PER_GB, GLOBAL_GRID_INTENSITY), 1000
  ) [OFFSET(PERCENTILE * 10)] AS FONT_EMISSIONS
FROM
  PAGE_DATA,
  UNNEST([10, 25, 50, 75, 90, 100]) AS PERCENTILE
GROUP BY
  PERCENTILE,
  CLIENT
ORDER BY
  CLIENT,
  PERCENTILE
